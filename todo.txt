Todo:

Implement actual disk I/O with RandomAccessFile - Austin
Test RandomAccessFile disk I/O with Austin - Brandon
File database integration and testing with other integration efforts - Zack
Finish custom serialization, documentation, and storage optimization - Tom


4 Nov: comments by Ted Herman: looks good, but the labor assignments
are not clear regarding who will do what and where.  For instance, 
what modules will Austin be doing, what specific things will Brandon 
do (test suites, specific activities), and how does Brandon's end-to-end
integration differ from Zack's integration and testing? I would like to 
see more details on the plans and activities.

DONE:
------------------------------------------------------------------------
Austin
----------
Implemented RAFile class, which inherited abstract methods from Tom's code
for ChunkedAccess.

Wrote tests in RAFileTest -- testChunkDeletion, testOverwriteOccupiedChunk,
testNextAvailableChunk, testIsFileSizeDoubled
	Tests Use: BinaryFileNode (Tom), Utilities (Tom/ Professor Herman)
__________

Tom
----------
Implemented abstract database level of the search engine.
Wrote tests for database level.

Uses/Used by: RAFile (Austin)
              BinaryTreeIntegratedWithRAFile (Zach)
      	 	  HashmapFieldDatabase (Austin)
      		  HashmapFieldDatabaseTest (Austin)
      		  IntergratedAVLWithRAFile (Zach)
      		  RAFileTest (Brandon)
      		  Utilities (Professor Herman)
      		  Field (Professor Herman)
           
__________
Brandon
----------
Wrote tests in RAFileTest -- readLargeChunk, writeLargeChunk
    Tests Use: BinaryFileNode (Tom), Utilities (Tom/ Professor Herman)
Wrote tests in NodeTest -- addNode, deleteNode
    Tests Use: Node (Tom), Utilities (Tom/ Professor Herman)
Wrote test in Integration Test -- testEmptyDatabase returns nothing
    Tests Use: AVLFieldDatabase, MockChunkRandomAccessFile
__________
Zach
----------

Working on integration tests as well as just making sure that the RA file works with data base

__________
_________________________________________________________________________

Tests remaining for 100% coverage:
	LinearMemoryDatabase
		- delete 
			- isn't tested at all. This is probably optional
	BinaryFileNode
		- compareTo
		- toString
	ValueFileNode
		- toString
	Field
		- getFieldName
		- getFieldValue
		- equals 
			- doesn't test if "other" isn't a Field object
	RAFile
		- still being developed
	ChunkedAccess
		- set
			- doesn't check if the byte array is too long
			- doesn't check if the capacity has to double
		- isChunkPositionOutOfBounds
			- doesn't check all the paths
	IdentifierDatabase
		- addIdentifier
			- IllegalAccessError never checked
		- removeIdentifier
			- doesn't check the quick loop break
		- getAllIdentifiers
			- doesn't check the quick loop break

	IntegratedFileDatabase
		- fetch
			- if the field isn't in the database
		- delete
			- if the field isn't in the database